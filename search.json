[
  {
    "objectID": "card.html",
    "href": "card.html",
    "title": "card - A basic playing card",
    "section": "",
    "text": "suits, ranks\n\n(['♣️', '♦️', '♥️', '♠️'],\n [None, 'A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'])\n\n\nHere is the whole list to show up\n\n\nCard\n\n Card (suit:int, rank:int)\n\nA playing card\n\n\n\n\nType\nDetails\n\n\n\n\nsuit\nint\nAn index into ‘suits’\n\n\nrank\nint\nAn index into ‘ranks’\n\n\n\n\nc = Card(suit=1, rank=3)\n\nHere is an example of the ‘c’ card when we put the output\n\nc\n\n3♦️\n\n\n\n\nCompairson operators\n\ntest_eq(Card(suit=1, rank=3), Card(suit=1, rank=3))\ntest_ne(Card(suit=2, rank=3), Card(suit=1, rank=3))\ntest_ne(Card(suit=2, rank=4), Card(suit=1, rank=3))\n\n\nassert(Card(suit=1, rank=3)<Card(suit=2, rank=3))\n\n\nassert (Card(suit=2, rank=3)>Card(suit=1, rank=3))\nassert not(Card(suit=1, rank=3)>Card(suit=2, rank=3))"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "nbdev_cards",
    "section": "",
    "text": "This file will become your README and also the index of your documentation."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "nbdev_cards",
    "section": "Install",
    "text": "Install\npip install your_project_name"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "nbdev_cards",
    "section": "How to use",
    "text": "How to use\nFill me in please! Don’t forget code examples:\n\nCard(1,3)\n\n3♦️"
  },
  {
    "objectID": "deck.html",
    "href": "deck.html",
    "title": "deck",
    "section": "",
    "text": "Deck\n\n Deck ()\n\nA deck of 52 Cards not including joker\n\ndeck = Deck()\ndeck\n\nA♣️;2♣️;3♣️;4♣️;5♣️;6♣️;7♣️;8♣️;9♣️;10♣️;J♣️;Q♣️;K♣️;A♦️;2♦️;3♦️;4♦️;5♦️;6♦️;7♦️;8♦️;9♦️;10♦️;J♦️;Q♦️;K♦️;A♥️;2♥️;3♥️;4♥️;5♥️;6♥️;7♥️;8♥️;9♥️;10♥️;J♥️;Q♥️;K♥️;A♠️;2♠️;3♠️;4♠️;5♠️;6♠️;7♠️;8♠️;9♠️;10♠️;J♠️;Q♠️;K♠️\n\n\n\nlen(deck)\n\n52\n\n\n\nCard(1,1) in deck\n\nTrue\n\n\n\nassert(len(deck)==52)\n\n\n\nDeck.pop\n\n Deck.pop (idx:int=-1)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nidx\nint\n-1\nindex of the card in the Deck default to the last one\n\n\n\n\ndeck.pop()\n\nK♠️\n\n\n\ndeck = Deck()\nassert(deck.pop()==Card(3,13))\n\nThere are only 51 cards left in the deck\n\nassert(len(deck)==51)\n\n\n\n\nDeck.remove\n\n Deck.remove (card:nbdev_cards.card.Card)\n\nRemoves Card from the deck\n\n\n\n\nType\nDetails\n\n\n\n\ncard\nCard\nCard to be removed from the deck\n\n\n\n\ncard23 = Card(2,3)\ndeck.remove(card23)\n\n\nassert card23 not in deck\n\n\n\n\nDeck.shuffle\n\n Deck.shuffle ()\n\n\n\n\ndraw\n\n draw (n:int=5, replace:bool=True)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nn\nint\n5\nn is the number of Cards to draw, defualt=5 Poker samole\n\n\nreplace\nbool\nTrue\nDo you need to replce them, defaul=True\n\n\n\n\ndraw(5, replace=False)\n\n[2♥️, 4♥️, 7♠️, 9♦️, Q♦️]"
  }
]